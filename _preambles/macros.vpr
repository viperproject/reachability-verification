/**
 * This file contains the macro definitions that are used for convenience. 
 * Basically, syntactic sugar. 
 */

define TREE(tr000) 
    GRAPH(tr000) && TREE_IMPL(tr000)

define TREE_IMPL(t001)
    CLOSED(t001) && ACYCLIC(t001) && UNSHARED(t001)

define DAG(dg000)
    GRAPH(dg000) && DAG_IMPL(dg000)

define DAG_IMPL(dg000)
    CLOSED(dg000) && ACYCLIC(dg000)

define DISJOINT(graph_A, graph_B)
    (forall r0:Ref :: 
        { r0 in graph_A, r0 in graph_B } 
            (r0 in graph_A) ==> !(r0 in graph_B)) 

define DISJOINT3(graph_A, graph_B, graph_C)
    (forall r0:Ref :: 
        { r0 in graph_A, r0 in graph_B } 
        { r0 in graph_B, r0 in graph_C } 
        { r0 in graph_C, r0 in graph_A } 
            !(r0 in graph_A) && !(r0 in graph_B) && !(r0 in graph_C) ||
             (r0 in graph_A) && !(r0 in graph_B) && !(r0 in graph_C) ||
            !(r0 in graph_A) &&  (r0 in graph_B) && !(r0 in graph_C) ||
            !(r0 in graph_A) && !(r0 in graph_B) &&  (r0 in graph_C))


define DISJOINT_EDGES(EG_A, EG_B)
    (forall e0:Edge :: 
        { e0 in EG_A, e0 in EG_B }
            (e0 in EG_A) ==> !(e0 in EG_B)) 

// TODO: Check that RHS==>LHS is okay. 
define GLOBAL_ROOT(graph_A,root)
    (forall n0:Ref :: 
        { P_(graph_A, root, n0) } 
            (P_(graph_A, root, n0) ==> n0 in graph_A))
    && (forall n0:Ref :: 
        { P_(graph_A, root, n0), n0 in graph_A } 
            (n0 in graph_A) ==> P_(graph_A, root, n0))

// TODO: Check if we should add RHS==>LHS.
define GLOBAL_SROOT(graph_A, roots)
    (forall n0:Ref :: 
        { SP_(graph_A, roots, n0) } 
            (n0 in graph_A) ==> SP_(graph_A, roots, n0))

// TODO: Check if we should add RHS==>LHS.
define GLOBAL_SINK(graph_A,sink)
    (forall n0:Ref :: 
        { P_(graph_A, n0, sink) } 
            (n0 in graph_A) ==> P_(graph_A, n0, sink))
    
define UNSHARED(graph_A)
    unshared_graph($$(graph_A))

define FUNCTIONAL(graph_A)
    func_graph($$(graph_A))

define ACYCLIC(graph_A)
    acyclic_graph($$(graph_A))

define ACYCLIC_LIST_SEGMENT(graph_A)
    ACYCLIC(graph_A) 
    && FUNCTIONAL(graph_A) 
    && UNSHARED(graph_A)

define COALIGNED_INTEREDGES(graph_A, graph_B)
    (CLOSED(graph_A) || CLOSED(graph_B)) && DISJOINT(graph_A, graph_B)

define CONST_EDGES(graph0)
    ($$(graph0) == old($$(graph0)))

define E(state_label, graph_A, x0, y0)
    edge(old[state_label]($$(graph_A)), x0, y0)

define E_(graph_A, x0, y0)
    edge($$(graph_A), x0, y0)

define E0(graph_A, x0, y0)
    edge(old($$(graph_A)), x0, y0)

define E1(graph_A, x0, y0)
    edge(old[l1]($$(graph_A)), x0, y0)

define E2(graph_A, x0, y0)
    edge(old[l2]($$(graph_A)), x0, y0)

define E3(graph_A, x0, y0)
    edge(old[l3]($$(graph_A)), x0, y0)

define E4(graph_A, x0, y0)
    edge(old[l4]($$(graph_A)), x0, y0)

define E5(graph_A, x0, y0)
    edge(old[l5]($$(graph_A)), x0, y0)

define E6(graph_A, x0, y0)
    edge(old[l6]($$(graph_A)), x0, y0)

define E7(graph_A, x0, y0)
    edge(old[l7]($$(graph_A)), x0, y0)

define E8(graph_A, x0, y0)
    edge(old[l8]($$(graph_A)), x0, y0)


define P(state_label, graph_A, x0, y0)
    exists_path(old[state_label]($$(graph_A)), x0, y0)

define P_(graph_A, x0, y0)
    exists_path($$(graph_A), x0, y0)

define P0(graph_A, x0, y0)
    exists_path(old($$(graph_A)), x0, y0)

define P1(graph_A, x0, y0)
    exists_path(old[l1]($$(graph_A)), x0, y0)

define P2(graph_A, x0, y0)
    exists_path(old[l2]($$(graph_A)), x0, y0)

define P3(graph_A, x0, y0)
    exists_path(old[l3]($$(graph_A)), x0, y0)

define P4(graph_A, x0, y0)
    exists_path(old[l4]($$(graph_A)), x0, y0)

define P5(graph_A, x0, y0)
    exists_path(old[l5]($$(graph_A)), x0, y0)

define P6(graph_A, x0, y0)
    exists_path(old[l6]($$(graph_A)), x0, y0)

define P7(graph_A, x0, y0)
    exists_path(old[l7]($$(graph_A)), x0, y0)

define P8(graph_A, x0, y0)
    exists_path(old[l8]($$(graph_A)), x0, y0)


define SP(state_label, graph_A, X0, y0)
    exists_spath(old[state_label]($$(graph_A)), X0, y0)

define SP_(graph_A, X0, y0)
    exists_spath($$(graph_A), X0, y0)

define SP0(graph_A, X0, y0)
    exists_spath(old($$(graph_A)), X0, y0)

define SP1(graph_A, X0, y0)
    exists_spath(old[l1]($$(graph_A)), X0, y0)

define SP2(graph_A, X0, y0)
    exists_spath(old[l2]($$(graph_A)), X0, y0)

define SP3(graph_A, X0, y0)
    exists_spath(old[l3]($$(graph_A)), X0, y0)

define SP4(graph_A, X0, y0)
    exists_spath(old[l4]($$(graph_A)), X0, y0)

define SP5(graph_A, X0, y0)
    exists_spath(old[l5]($$(graph_A)), X0, y0)

define SP6(graph_A, X0, y0)
    exists_spath(old[l6]($$(graph_A)), X0, y0)

define SP7(graph_A, X0, y0)
    exists_spath(old[l7]($$(graph_A)), X0, y0)

define SP8(graph_A, X0, y0)
    exists_spath(old[l8]($$(graph_A)), X0, y0)


define DEP(state_label, graph_A, x0, y0, u0, v0)
    exists_DEP(old[state_label]($$(graph_A)), x0, y0, u0, v0)

define DEP_(graph_A, x0, y0, u0, v0)
    exists_DEP($$(graph_A), x0, y0, u0, v0)

define DEP0(graph_A, x0, y0, u0, v0)
    exists_DEP(old($$(graph_A)), x0, y0, u0, v0)

define DEP1(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l1]($$(graph_A)), x0, y0, u0, v0)

define DEP2(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l2]($$(graph_A)), x0, y0, u0, v0)

define DEP3(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l3]($$(graph_A)), x0, y0, u0, v0)

define DEP4(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l4]($$(graph_A)), x0, y0, u0, v0)

define DEP5(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l5]($$(graph_A)), x0, y0, u0, v0)

define DEP6(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l6]($$(graph_A)), x0, y0, u0, v0)

define DEP7(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l7]($$(graph_A)), x0, y0, u0, v0)

define DEP8(graph_A, x0, y0, u0, v0)
    exists_DEP(old[l8]($$(graph_A)), x0, y0, u0, v0)
