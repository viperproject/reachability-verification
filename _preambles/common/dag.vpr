// --- This file contains the common parts of the encoding of Update Formulas for acylic graphs. --- 

define TC_G_MINUS_DELTA(smaller_EG, larger_EG, alpha, beta)
    /**
        Notes. 

        1) If x0 == alpha, then there is a path (x0, alpha), which contradicts the requirement in LHS. 
        2) Similarly, for y0 == beta. 
        3) This formula is particularly useful for recovering graph segments for which reachability is the 
            same before and after the unlink operation. For example, in list-reverse-acyclic.vpr we have 
                
                // null <-- [ ] <-- ... <-- [y]     [x] --> [t] --> [ ] --> ... --> [ ] --> null 
                unlink_DAG_next(g, x)
                // null <-- [ ] <-- ... <-- [y]     [x]     [t] --> [ ] --> ... --> [ ] --> null
                assert forall n:Ref :: { P(g, t, n) } P(g, t, n) <==> P0(g, t, n)
                assert forall n:Ref :: { P(g, y, n) } P(g, y, n) <==> P0(g, y, n)
     */
    (forall x0:Ref, y0:Ref ::
        { exists_path(smaller_EG,x0,y0) }
            !(exists_path(larger_EG, x0, alpha) && exists_path(larger_EG, beta, y0))
                ==> 
                (exists_path(larger_EG, x0, y0) <==> exists_path(smaller_EG, x0, y0)))
    && 
    (forall x0:Ref, y0:Ref ::
        { exists_path(smaller_EG,x0,y0) }
            (/*(x0 != alpha) && (y0 != beta) &&*/ exists_path(larger_EG, x0, alpha) && exists_path(larger_EG, beta, y0)) 
                ==> 
                (exists_path(smaller_EG, x0, y0) <==> (x0 == y0) ||
                    !( forall u0:Ref :: 
                        { exists_path(larger_EG, x0, u0) }
                        { exists_path(larger_EG, u0, y0) }
                            !(exists_path(larger_EG, x0, u0) && exists_path(larger_EG, u0, y0) &&
                            (!exists_path(larger_EG, u0, beta) && !exists_path(larger_EG, beta, u0) 
                            || !exists_path(larger_EG, u0, alpha) && !exists_path(larger_EG, alpha, u0))))
                    ||
                    !( forall u0:Ref :: 
                        { exists_path(larger_EG, alpha, u0) }
                        { exists_path(larger_EG, u0, beta) }
                            !(u0 != alpha && u0 != beta && exists_path(larger_EG, alpha, u0) && exists_path(larger_EG, u0, beta)))
                    ||
                    !( forall u0:Ref, v0:Ref :: 
                        { exists_path(larger_EG,x0,u0), exists_path(larger_EG,beta,v0) }
                        { exists_path(larger_EG,u0,alpha), exists_path(larger_EG,beta,v0) }
                        { exists_path(larger_EG,x0,u0), exists_path(larger_EG,v0,y0) }
                        { exists_path(larger_EG,u0,alpha), exists_path(larger_EG,v0,y0) }
                            !((u0 != alpha || v0 != beta) && edge(larger_EG,u0,v0) 
                            && exists_path(larger_EG,x0,u0) && exists_path(larger_EG,u0,alpha) 
                            && exists_path(larger_EG,beta,v0) && exists_path(larger_EG,v0,y0)))))

define TC_G_PLUS_DELTA(smaller_EG, larger_EG, alpha, beta)
    (forall x0:Ref, y0:Ref ::
        { exists_path(larger_EG,x0,y0) }
            exists_path(larger_EG,x0,y0) <==> exists_path(smaller_EG,x0,y0) || (exists_path(smaller_EG,x0,alpha) && exists_path(smaller_EG,beta,y0)))

define DAG_LINK__PRECISE_TC_UPDATE_FORMULA(g, alpha, beta)
    TC_G_PLUS_DELTA(old($$(g)), $$(g), alpha, beta)
    && TC_G_MINUS_DELTA(old($$(g)), $$(g), alpha, beta)

define DAG_UNLINK__PRECISE_TC_UPDATE_FORMULA(g, alpha, beta) 
    TC_G_PLUS_DELTA($$(g), old($$(g)), alpha, beta)
    && TC_G_MINUS_DELTA($$(g), old($$(g)), alpha, beta)