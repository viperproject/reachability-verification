field first: Ref
field second: Ref
field third: Ref 

function $$(nodes: Set[Ref]): Set[Edge]
  requires NODES(nodes, 1/2) 
  ensures (forall p: Ref, s: Ref :: { create_edge(p, s) } ((p in nodes) && (s in nodes) && (p.first == s || p.second == s || p.third == s)) == (create_edge(p, s) in result))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (p in nodes) && exists_path(result, p, s) ==> (s in nodes))
  ensures (forall p: Ref, s: Ref :: { (p in nodes),(s in nodes),exists_path(result, p, s) } (s in nodes) && exists_path(result, p, s) ==> (p in nodes))

define NODES_first(nodes, p)
    ( forall n:Ref :: {n.first} n in nodes ==> acc(n.first, p) )

define NODES_second(nodes, p)
    ( forall n:Ref :: {n.second} n in nodes ==> acc(n.second, p) )

define NODES_third(nodes, p)
    ( forall n:Ref :: {n.third} n in nodes ==> acc(n.third, p) )

define PROTECTED_NODES_first(nodes, mutable_node, p)
    (mutable_node in nodes)
    && acc(mutable_node.first, write)
    && ( forall n:Ref :: { n.first } n in nodes && n != mutable_node ==> acc(n.first, p) )

define PROTECTED_NODES_second(nodes, mutable_node, p)
    (mutable_node in nodes)
    && acc(mutable_node.second, write)
    && ( forall n:Ref :: { n.second } n in nodes && n != mutable_node ==> acc(n.second, p) )

define PROTECTED_NODES_third(nodes, mutable_node, p)
    (mutable_node in nodes)
    && acc(mutable_node.third, write)
    && ( forall n:Ref :: { n.third } n in nodes && n != mutable_node ==> acc(n.third, p) )

define NODES(nodes, p)
    NODES_first(nodes, p)
    && NODES_second(nodes, p)
    && NODES_third(nodes, p)

define CLOSED_first(nodes)  
    ( forall n:Ref ::
        { n.first in nodes }
        { n in nodes, n.first }
            n in nodes && n.first != null ==> n.first in nodes )

define CLOSED_second(nodes)
    ( forall n:Ref ::
        { n.second in nodes }
        { n in nodes, n.second }
            n in nodes && n.second != null ==> n.second in nodes )

define CLOSED_third(nodes)
    ( forall n:Ref ::
        { n.third in nodes }
        { n in nodes, n.third }
            n in nodes && n.third != null ==> n.third in nodes )

define CLOSED(nodes)
    CLOSED_first(nodes)
    && CLOSED_second(nodes)
    && CLOSED_third(nodes)

define GRAPH(nodes)
    !(null in nodes)
    && NODES(nodes, write)
    && CLOSED(nodes)

define READONLY_GRAPH(nodes)
    !(null in nodes)
    && NODES(nodes, 1/2)
    && CLOSED(nodes)

define PROTECTED_GRAPH_first(nodes, mutable_node)
    !(null in nodes)
    && PROTECTED_NODES_first(nodes, mutable_node, 1/2)
    && NODES_second(nodes, 1/2)
    && NODES_third(nodes, 1/2)
    && CLOSED(nodes)

define PROTECTED_GRAPH_second(nodes, mutable_node)
    !(null in nodes)
    && NODES_first(nodes, 1/2)
    && PROTECTED_NODES_second(nodes, mutable_node, 1/2)
    && NODES_third(nodes, 1/2)
    && CLOSED(nodes)

define PROTECTED_GRAPH_third(nodes, mutable_node)
    !(null in nodes)
    && NODES_first(nodes, 1/2)
    && NODES_second(nodes, 1/2)
    && PROTECTED_NODES_third(nodes, mutable_node, 1/2)
    && CLOSED(nodes)