import "../../_preambles/common/zopg.vpr"

// Should be applied together with framing
function apply_DepToTcWisdom(g0:Set[Ref], g1:Set[Ref]): Bool
    requires READONLY_NODES(g0)
    requires READONLY_NODES(g1)
    ensures forall u:Ref, v:Ref :: 
        { DEP_(g0 union g1, u, v, u, u.first) }
        { DEP_(g0 union g1, u, v, u, u.second) }
        { DEP_(g0 union g1, u, v, u, u.third) }
        { DEP_(g0 union g1, u, v.first, v, v.first) } 
        { DEP_(g0 union g1, u, v.second, v, v.second) } 
        { DEP_(g0 union g1, u, v.third, v, v.third) } 
            u in g0 && v in g0 ==> __learn_trigger__( P_(g0 union g1,u,v) )
    ensures forall u:Ref, v:Ref :: 
        { DEP_(g1 union g0, u, v, u, u.first) }
        { DEP_(g1 union g0, u, v, u, u.second) }
        { DEP_(g1 union g0, u, v, u, u.third) }
        { DEP_(g1 union g0, u, v.first, v, v.first) } 
        { DEP_(g0 union g1, u, v.second, v, v.second) } 
        { DEP_(g0 union g1, u, v.third, v, v.third) }  
            u in g1 && v in g1 ==> __learn_trigger__( P_(g1 union g0,u,v) )
    ensures forall u:Ref, v:Ref :: 
        { DEP_(g0 union g1, u, v, u, u.first) }
        { DEP_(g0 union g1, u, v, u, u.second) }
        { DEP_(g0 union g1, u, v, u, u.third) }
        { DEP_(g0 union g1, u, v.first, v, v.first) } 
        { DEP_(g0 union g1, u, v.second, v, v.second) }
        { DEP_(g0 union g1, u, v.third, v, v.third) } 
            u in g0 && v in g0 ==> __learn_trigger__( P_(g0 union g1,u,v) )
    ensures forall u:Ref, v:Ref :: 
        { DEP_(g1 union g0, u, v, u, u.first) }
        { DEP_(g1 union g0, u, v, u, u.second) }
        { DEP_(g1 union g0, u, v, u, u.third) }
        { DEP_(g1 union g0, u, v.first, v, v.first) } 
        { DEP_(g1 union g0, u, v.second, v, v.second) }
        { DEP_(g1 union g0, u, v.third, v, v.third) } 
            u in g1 && v in g1 ==> __learn_trigger__( P_(g1 union g0,u,v) )

method unlink_ZOPG_first(g:Set[Ref], node:Ref)
    requires node in g
    requires PROTECTED_GRAPH_first(g,node)
    ensures PROTECTED_GRAPH_first(g,node)
    ensures node.first == null
    ensures old(node.first) == null ==> $$(g) == old($$(g))
    ensures old(node.first) != null ==> UNLINK__PRECISE_EDGE_UPDATE_FORMULA(g, node, old(node.first))
    ensures old(node.first) != null ==> ZOPG_UNLINK__PRECISE_TC_UPDATE_FORMULA(g, node, old(node.first))

method link_ZOPG_first(g:Set[Ref], from:Ref, to:Ref)
    requires from in g
    requires to != null ==> to in g
    requires PROTECTED_GRAPH_first(g,from) && from.first == null
    ensures PROTECTED_GRAPH_first(g,from)
    ensures from.first == to
    ensures to == null ==> $$(g) == old($$(g))
    ensures (to != null) ==> LINK__PRECISE_EDGE_UPDATE_FORMULA(g, from, to)
    ensures (to != null) ==> ZOPG_LINK__PRECISE_TC_UPDATE_FORMULA(g, from, to)      
    // TODO: Automatic reasoning support

method unlink_ZOPG_second(g:Set[Ref], node:Ref)
    requires node in g
    requires PROTECTED_GRAPH_second(g,node)
    ensures PROTECTED_GRAPH_second(g,node)
    ensures node.second == null
    ensures old(node.second) == null ==> $$(g) == old($$(g))
    ensures old(node.second) != null ==> UNLINK__PRECISE_EDGE_UPDATE_FORMULA(g, node, old(node.second))
    ensures old(node.second) != null ==> ZOPG_UNLINK__PRECISE_TC_UPDATE_FORMULA(g, node, old(node.second))

method link_ZOPG_second(g:Set[Ref], from:Ref, to:Ref)
    requires from in g
    requires to != null ==> to in g
    requires PROTECTED_GRAPH_second(g,from) && from.second == null
    ensures PROTECTED_GRAPH_second(g,from)
    ensures from.second == to
    ensures to == null ==> $$(g) == old($$(g))
    ensures (to != null) ==> LINK__PRECISE_EDGE_UPDATE_FORMULA(g, from, to)
    ensures (to != null) ==> ZOPG_LINK__PRECISE_TC_UPDATE_FORMULA(g, from, to)      
    // TODO: Automatic reasoning support

method unlink_ZOPG_third(g:Set[Ref], node:Ref)
    requires node in g
    requires PROTECTED_GRAPH_third(g,node)
    ensures PROTECTED_GRAPH_third(g,node)
    ensures node.third == null
    ensures old(node.third) == null ==> $$(g) == old($$(g))
    ensures old(node.third) != null ==> UNLINK__PRECISE_EDGE_UPDATE_FORMULA(g, node, old(node.third))
    ensures old(node.third) != null ==> ZOPG_UNLINK__PRECISE_TC_UPDATE_FORMULA(g, node, old(node.third))

method link_ZOPG_third(g:Set[Ref], from:Ref, to:Ref)
    requires from in g
    requires to != null ==> to in g
    requires PROTECTED_GRAPH_third(g,from) && from.third == null
    ensures PROTECTED_GRAPH_third(g,from)
    ensures from.third == to
    ensures to == null ==> $$(g) == old($$(g))
    ensures (to != null) ==> LINK__PRECISE_EDGE_UPDATE_FORMULA(g, from, to)
    ensures (to != null) ==> ZOPG_LINK__PRECISE_TC_UPDATE_FORMULA(g, from, to)      
    // TODO: Automatic reasoning support