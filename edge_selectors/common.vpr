/** Common part of the edge_selectors preamble */

define NODES_for($field$, nodes, p)
    (forall n:Ref :: 
        { n.$field$ } 
            n in nodes ==> acc(n.$field$, p))

define PROTECTED_NODES_for($field$, nodes, mutable_node, p)
    ((mutable_node in nodes)
    && acc(mutable_node.$field$, write)
    && (forall n:Ref :: 
        { n.$field$ } 
            n in nodes && n != mutable_node ==> acc(n.$field$, p)))

define CLOSED_for($field$, nodes)  
    (forall n:Ref :: 
        { n.$field$ in nodes }
        { n in nodes, n.$field$ }
            n in nodes && n.$field$ != null ==> n.$field$ in nodes)

define COMPLETE_for($field$, nodes)
    (forall n:Ref :: 
        { n.$field$ in nodes }
        { n in nodes, n.$field$ }
            n in nodes ==> n.$field$ in nodes)

define DISJOINT(graph_A, graph_B)
    (forall r:Ref :: 
        { r in graph_A, r in graph_B } 
            (r in graph_A) ==> !(r in graph_B)) &&
    (forall r:Ref :: 
        { r in graph_A, r in graph_B } 
            (r in graph_B) ==> !(r in graph_A))