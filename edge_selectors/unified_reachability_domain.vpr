
domain Edge[T] {
    function edge_pred(e0: Edge[T]): Ref
    function edge_succ(e0: Edge[T]): Ref

    function create_edge(x0:Ref, y0:Ref): Edge[T]

    //TODO: Rename quantified variables 
    axiom edge_injectivity {
        forall x0:Ref, y0:Ref ::
            { create_edge(x0,y0) }
                edge_pred( create_edge(x0,y0) ) == x0 &&
                edge_succ( create_edge(x0,y0) ) == y0
    }
}

field next:Ref
field fnext:Ref
domain EdgeTypeNext {}
domain EdgeTypeFNext {}

function $$__fnext(nodes0: Set[Ref]): Set[Edge[T]]


method foo()
{
    var e1:Edge[EdgeTypeNext]
    var e2:Edge[EdgeTypeFNext]

    assert e1 == e1
}
