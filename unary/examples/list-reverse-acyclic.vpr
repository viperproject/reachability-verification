import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/purification.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"
import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"

import "../../_preambles/macros.vpr"

method reverse(g: Set[Ref], xe: Ref)  returns (mrk: Set[Ref], y: Ref)
    requires xe in g
    requires GRAPH(g) && CLOSED(g)
    requires UNSHARED(g)
    requires ACYCLIC(g)
    requires forall n:Ref :: { E_(g,n,xe) } n in g ==> !E_(g,n,xe) // xe doesn't have a predecessor
    requires forall n: Ref :: { P_(g, xe, n) } (n in g) ==> P_(g, xe, n)

    ensures GRAPH(g) && CLOSED(g)
    ensures UNSHARED(g)
    ensures mrk subset g
    ensures forall v1:Ref, v2:Ref :: { E0(g,v1,v2) }{ E_(g,v2,v1) } v2 in mrk && v1 in mrk && v1 != y ==> ( E0(g,v1,v2) ==> E_(g,v2,v1) ) 
    ensures forall v1:Ref, v2:Ref :: { E0(g,v1,v2) }{ E_(g,v2,v1) } v2 in mrk && v1 in mrk            ==> ( E_(g,v2,v1) ==> E0(g,v1,v2) ) 
    ensures y != null ==> forall n:Ref :: { P_(g,y,n) }  n in g ==> P_(g,y,n)
    ensures y != null ==> (forall n: Ref :: { P_(g, y, n) } (n in mrk) <==> P_(g, y, n)) 
    // ensures xe.next == null || mrk == g //-- not easy to prove
{
    var t: Ref := null
    var x: Ref := xe
    y := null
    mrk := Set()

    while ( x != null && !(x in mrk) )
    
        // [l0] null <-- [ ] <-- ... <-- [y]     [x] --> [t] --> [ ] --> ... --> [ ] --> null 
        // [l1] null <-- [ ] <-- ... <-- [y]     [x]     [t] --> [ ] --> ... --> [ ] --> null
        // [l2] null <-- [ ] <-- ... <-- [y] <-- [x]     [t] --> [ ] --> ... --> [ ] --> null
        // [l3] null <-- [ ] <-- ... <-- [ ] <-- [y]     [x] --> [ ] --> ... --> [ ] --> null

        invariant x != null ==> x in g
        // invariant y != null ==> y in g
        invariant GRAPH(g) && CLOSED(g)
        invariant UNSHARED(g)

        invariant mrk subset g
        invariant y != null ==> y in mrk
        
        // Special cases: semi-precise info about mrk -- this can be expressed more precisely via a loop transformer. 
        // This invariant is used instead of a loop transformer
        invariant y == null ==> mrk == Set( ) || mrk == Set(x)

        // We could continue to special-case the value of mrk for the first few iterations, but that isn't currently needed. 
        // invariant y != null && y.next == null <==> mrk == Set(y) || mrk == Set(x,y)

        // y never has a predecessor
        invariant x != null ==> forall n:Ref :: { E_(g,n,x) } n in g ==> !E_(g,n,x)
        
        // x never has a predecessor
        invariant y != null ==> forall n:Ref :: { E_(g,n,y) } n in g ==> !E_(g,n,y)
        
        // In a non-trivial graph (x != y), an old edge goes from y to x (starting from the second iteration, once y is assigned).
        invariant y != null && x != null && x != y ==> E0(g,y,x)

        // encoding the edges that haven't been flipped yet
        invariant forall v1:Ref, v2:Ref :: { E0(g,v1,v2) }{ E_(g,v1,v2) } !(v1 in mrk) ==> ( E0(g,v1,v2) <==> E_(g,v1,v2) )
        
        // encoding the destroyed edge
        invariant forall v1:Ref, v2:Ref :: { E0(g,v1,v2) }{ E_(g,v1,v2) } v1 in mrk && !(v2 in mrk) ==> ( E0(g,v1,v2) ==> !E_(g,v1,v2) && !E_(g,v2,v1) )

        // we observe flipped edges after the second iteration  
        invariant forall v1:Ref, v2:Ref :: { E0(g,v1,v2) }{ E_(g,v2,v1) } v1 in mrk && v2 in mrk && v1 != y ==> ( E0(g,v1,v2) <==> E_(g,v2,v1) ) 

        
        // needed for triggering 
        invariant x != null ==> __learn_trigger__(E_(g, x, x.next)) 


        // reachability properties
        invariant y != null ==> !P_(g, y, x)
        invariant y != null && y.next != null ==> P_(g, y, y.next)
        invariant forall n:Ref :: { P_(g,x,n) }{ P_(g,y,n) } n in g ==> ( P_(g,x,n) ||  P_(g,y,n))
        invariant forall n:Ref :: { P_(g,x,n) }{ P_(g,y,n) } n in g ==> (!P_(g,x,n) || !P_(g,y,n))

        // the relation between mrk and P. 

        invariant y != null ==> (forall n: Ref :: { P_(g, y, n) } (n in mrk) <==> P_(g, y, n)) 

        invariant ACYCLIC(g)
    {
        // assert (forall v1:Ref, v2:Ref :: { E_(g,v1,v2) }{ P_(g,v2,v1) } E_(g,v1,v2) ==> !P_(g,v2,v1))

        mrk := mrk union Set(x)
        // assert x.next != null && x != x.next ==> E_(g, x, x.next)
        t := x.next


        // Encoding x.next := y
        unlink_DAG_next(g, x)

        // Found the missing bit (needed for acyclicity): 
        assume apply_noExit($$(g), g, g setminus Set(x))

        link_DAG_next(g, x, y)
        

        y := x
        x := t
    }
}
