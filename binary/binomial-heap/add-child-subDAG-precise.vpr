import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../examples/legoFraming-snapshot-27012019.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"

define child left 
define next_sibling right

define __CONVEXITY_CHECKES true 

method addChildSubdag(dag: Set[Ref], node: Ref, 
                       sub_dag:Set[Ref], ch: Ref) 
                returns (new_dag: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(dag, sub_dag)

    requires DAG(dag)
    requires node in dag

    requires DAG(sub_dag)
    requires ch in sub_dag
    requires GLOBAL_ROOT(sub_dag, ch)

    ensures new_dag == dag union sub_dag
    ensures DAG(new_dag)
    ensures CONST_EDGES(sub_dag)

    ensures linked_node in dag 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_dag, x, y) }
            E_(new_dag, x, y) <==> E0(dag, x, y) || E0(sub_dag, x, y) || 
                                    (x == linked_node && y == ch) 

    ensures forall n:Ref :: 
        { P_(new_dag, node, n) }
        { P0(sub_dag, ch, n) }
        { P0(dag, node, n) }
            n in new_dag ==> 
                (P_(new_dag, node, n) <==> P0(sub_dag, ch, n) || P0(dag, node, n))
{
    new_dag := dag union sub_dag

    if ( node.child != null ) {
        var ch_node:Ref := node.child
        var ch_dag: Set[Ref] := sub(dag, ch_node)
        var frame: Set[Ref] := dag setminus ch_dag

        EnableFocusOnConvexSubHeap(dag, ch_dag)
        EnableFocusOnConvexSubHeap(dag, frame)
        
        var new_ch_dag: Set[Ref]
label l1
        new_ch_dag, linked_node := addSiblingSubdag(ch_dag, ch_node, sub_dag, ch)
label l2

        new_dag := frame union new_ch_dag

        EnableFocusOnConvexSubHeap(new_dag, new_ch_dag)
        EnableFocusOnConvexSubHeap(new_dag, frame)
        ApplyConvexTCFraming(l1, l2, new_ch_dag, new_dag, frame)


    } else {
        EnableFocusOnConvexSubHeap(new_dag, dag)
        EnableFocusOnConvexSubHeap(new_dag, sub_dag)

        // Encoding node.child := ch ...
        link_DAG_left(new_dag, node, ch)


        // Ghost code for writing the postcondition
        linked_node := node
    }
}

method addSiblingSubdag(dag: Set[Ref], node: Ref, // the root node of the dag
                         sub_dag:Set[Ref], sib: Ref) 
                returns (new_dag: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(dag, sub_dag)

    requires DAG(dag)
    requires node in dag
    requires GLOBAL_ROOT(dag, node)
    
    requires DAG(sub_dag)
    requires sib in sub_dag
    requires GLOBAL_ROOT(sub_dag, sib)

    ensures new_dag == dag union sub_dag
    ensures DAG(new_dag)
    ensures linked_node in dag 
    ensures GLOBAL_ROOT(new_dag, node)
    ensures CONST_EDGES(sub_dag)
    
    // We have added precisely one edge. 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_dag, x, y) }
            E_(new_dag, x, y) <==> E0(dag, x, y) || E0(sub_dag, x, y) || 
                                    (x == linked_node && y == sib)
                    
    ensures forall n:Ref :: 
        { P_(new_dag, node, n) }
        { P0(dag, node, n) }
        { P0(sub_dag, sib, n) }
            n in new_dag ==> 
                (P_(new_dag, node, n) <==> P0(sub_dag, sib, n) || P0(dag, node, n))
