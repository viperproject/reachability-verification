import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/TrCloZopgDomain.vpr"

import "../../_preambles/framing.vpr"
import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"


import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"

define child left 
define next_sibling right

define TREE(t) 
    GRAPH(t) && CLOSED(t) && ACYCLIC(t) && UNSHARED(t)

method addSiblingSubtree(tree: Set[Ref], node: Ref, 
                         sub_tree:Set[Ref], sib: Ref) 
                returns (new_tree: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(tree, sub_tree)
    requires TREE(tree)
    requires node in tree
    
    requires TREE(sub_tree)
    requires sib in sub_tree
    requires GLOBAL_ROOT(sub_tree, sib)

    ensures new_tree == tree union sub_tree
    ensures TREE(new_tree)
    ensures CONST_EDGES(sub_tree)
    ensures forall x:Ref, y:Ref :: 
        { E_(new_tree, x, y) }
            E_(new_tree, x, y) <==> E0(tree, x, y) || E0(sub_tree, x, y) || 
                                    (x == linked_node && y == sib)
    ensures forall n:Ref :: 
        { P0(tree, node, n) }
        { P_(new_tree, node, n) }
            n in new_tree && P0(tree, node, n) ==> P_(new_tree, node, n)
    ensures forall n:Ref :: 
        { P_(new_tree, node, n) }
            n in sub_tree ==> P_(new_tree, node, n)
{
    var curr_node: Ref := node
    while ( curr_node.next_sibling != null )
        invariant TREE(tree) && TREE(sub_tree)
        invariant node in tree && curr_node in tree

        invariant sib in sub_tree

        invariant DISJOINT(tree, sub_tree)

        invariant curr_node.next_sibling != null ==> P_(tree, curr_node, curr_node.next_sibling)
        invariant P_(tree, node, curr_node)

        invariant forall n:Ref :: 
            { P_(tree, node, n) }
            { P0(tree, node, n) }
                n in tree && !P0(tree, node, n) ==> !P_(tree, node, n)

        invariant forall n:Ref :: 
            { P_(tree, node, n) }
            { P0(tree, node, n) }
                n in tree && P0(tree, node, n) ==> P_(tree, node, n)

        invariant CONST_EDGES(tree)
        invariant CONST_EDGES(sub_tree)
        // invariant GLOBAL_ROOT(sub_tree, sib)
    {
        curr_node := curr_node.next_sibling
    }
   
    new_tree := tree union sub_tree
    
    // Framing
    assume apply_TCFraming(tree, sub_tree)

    // Encoding curr_node.next_sibling := sib ...
    link_DAG_right(new_tree, curr_node, sib)

    // Ghost code for writing the postcondition
    linked_node := curr_node
}
