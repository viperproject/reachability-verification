import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../examples/legoFraming-snapshot-27012019.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"


import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"


define child left 
define next_sibling right

define __CONVEXITY_CHECKES true 

/**
 * Add `sub_dag` with root `sib` as the last sibling of `node` in `dag`. 
 * Note that `node` must not be the root of `dag`. 
 */
method addSiblingSubdag(dag: Set[Ref], node: Ref, 
                         sub_dag:Set[Ref], sib: Ref) 
                returns (new_dag: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(dag, sub_dag)

    requires DAG(dag)
    requires node in dag
    requires GLOBAL_ROOT(dag, node)
    
    requires DAG(sub_dag)
    requires sib in sub_dag
    requires GLOBAL_ROOT(sub_dag, sib)

    ensures new_dag == dag union sub_dag
    ensures DAG(new_dag)
    ensures linked_node in dag 
    ensures GLOBAL_ROOT(new_dag, node)
    ensures CONST_EDGES(sub_dag)
    
    // We have added precisely one edge. 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_dag, x, y) }
            E_(new_dag, x, y) <==> E0(dag, x, y) || E0(sub_dag, x, y) || 
                                    (x == linked_node && y == sib)

    ensures forall n:Ref :: 
        { P_(new_dag, node, n) }
        { P0(dag, node, n) }
        { P0(sub_dag, sib, n) }
            n in new_dag ==> 
                (P_(new_dag, node, n) <==> P0(sub_dag, sib, n) || P0(dag, node, n))
{
    var curr_node: Ref := node
    while ( curr_node.next_sibling != null )
        invariant DAG(dag) && DAG(sub_dag)
        invariant node in dag && curr_node in dag

        invariant sib in sub_dag

        invariant DISJOINT(dag, sub_dag)

        invariant curr_node.next_sibling != null ==> P_(dag, curr_node, curr_node.next_sibling)
        invariant P_(dag, node, curr_node)

        invariant forall n:Ref :: 
            { P_(dag, node, n) }
            { P0(dag, node, n) }
                n in dag && !P0(dag, node, n) ==> !P_(dag, node, n)

        invariant forall n:Ref :: 
            { P_(dag, node, n) }
            { P0(dag, node, n) }
                n in dag && P0(dag, node, n) ==> P_(dag, node, n)

        invariant CONST_EDGES(dag)
        invariant CONST_EDGES(sub_dag)
    {
        curr_node := curr_node.next_sibling
    }
   
    new_dag := dag union sub_dag
    
    // Partitioning the paths ...
    EnableFocusOnConvexSubHeap(new_dag, dag)
    EnableFocusOnConvexSubHeap(new_dag, sub_dag)

    // Encoding curr_node.next_sibling := sib ...
    link_DAG_right(new_dag, curr_node, sib)

    // Ghost code for writing the postcondition
    linked_node := curr_node
}
