import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/TrCloZopgDomain.vpr"

import "../../_preambles/framing.vpr"
import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"


import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"

define child left 
define next_sibling right

define TREE(t) 
    GRAPH(t) && TREE_IMPL(t)

define TREE_IMPL(t)
    CLOSED(t) && ACYCLIC(t) && UNSHARED(t)

function subTree(t: Set[Ref], sub_root: Ref): Set[Ref]
    requires TREE(t)
    requires sub_root in t
    
    ensures result subset t
    ensures TREE_IMPL(result)
    ensures !(null in result)
    ensures sub_root in result
    ensures GLOBAL_ROOT(result, sub_root)


method addChildSubtree(tree: Set[Ref], node: Ref, 
                       sub_tree:Set[Ref], ch: Ref) 
                returns (new_tree: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(tree, sub_tree)

    requires TREE(tree)
    requires node in tree

    requires TREE(sub_tree)
    requires ch in sub_tree
    requires GLOBAL_ROOT(sub_tree, ch)

    ensures new_tree == tree union sub_tree
    ensures TREE(new_tree)
    ensures CONST_EDGES(sub_tree)

    ensures linked_node in tree 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_tree, x, y) }
            E_(new_tree, x, y) <==> E0(tree, x, y) || E0(sub_tree, x, y) || 
                                    (x == linked_node && y == ch) 

    ensures forall n:Ref :: 
        { P_(new_tree, node, n) }
        { P0(sub_tree, ch, n) }
        { P0(tree, node, n) }
            n in new_tree ==> 
                (P_(new_tree, node, n) <==> P0(sub_tree, ch, n) || P0(tree, node, n))
{
    new_tree := tree union sub_tree

    if ( node.child != null ) {
        var ch_node:Ref := node.child
        var ch_tree: Set[Ref] := subTree(tree, ch_node)
        var frame: Set[Ref] := tree setminus ch_tree

        PartitionPathsInConvexSubHeap(tree, ch_tree)
        PartitionPathsInConvexSubHeap(tree, frame)
        
        var new_ch_tree: Set[Ref]
label l1
        new_ch_tree, linked_node := addSiblingSubtree(ch_tree, ch_node, sub_tree, ch)
label l2

        new_tree := frame union new_ch_tree

        PartitionPathsInConvexSubHeap(new_tree, new_ch_tree)
        PartitionPathsInConvexSubHeap(new_tree, frame)
        PartitionPathsInConvexSubHeap(new_tree, sub_tree)
        ApplyConvexTCFraming(l1, l2, new_ch_tree, new_tree)
        // assume DISJOINT(frame, new_ch_tree)

    } else {
        PartitionPathsInConvexSubHeap(new_tree, tree)
        PartitionPathsInConvexSubHeap(new_tree, sub_tree)

        // Encoding node.child := ch ...
        link_DAG_left(new_tree, node, ch)


        // Ghost code for writing the postcondition
        linked_node := node
    }
}

method addSiblingSubtree(tree: Set[Ref], node: Ref, // the root node of the tree
                         sub_tree:Set[Ref], sib: Ref) 
                returns (new_tree: Set[Ref], 
                         linked_node: Ref) // ghost
    
    requires DISJOINT(tree, sub_tree)

    requires TREE(tree)
    requires node in tree
    requires GLOBAL_ROOT(tree, node)
    
    requires TREE(sub_tree)
    requires sib in sub_tree
    requires GLOBAL_ROOT(sub_tree, sib)

    ensures new_tree == tree union sub_tree
    ensures TREE(new_tree)
    ensures linked_node in tree 
    ensures GLOBAL_ROOT(new_tree, node)
    ensures CONST_EDGES(sub_tree)
    
    // We have added precisely one edge. 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_tree, x, y) }
            E_(new_tree, x, y) <==> E0(tree, x, y) || E0(sub_tree, x, y) || 
                                    (x == linked_node && y == sib)
                    
    ensures forall n:Ref :: 
        { P_(new_tree, node, n) }
        { P0(tree, node, n) }
        { P0(sub_tree, sib, n) }
            n in new_tree ==> 
                (P_(new_tree, node, n) <==> P0(sub_tree, sib, n) || P0(tree, node, n))
