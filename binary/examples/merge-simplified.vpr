import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "./legoFraming-snapshot-27012019.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../_preambles/dag.vpr"

define __CONVEXITY_CHECKES false 


define TWO_ROOTED_DAG(nodes, root, root_s)
    (forall n:Ref :: 
        { P_(nodes, root_s, n) } 
        { P_(nodes, root, n) }
            n in nodes <==> P_(nodes, root, n) && !P_(nodes, root_s, n) ||
                           !P_(nodes, root, n) &&  P_(nodes, root_s, n))

method mergeRight(g: Set[Ref], // ghost
                tree: Set[Ref], root: Ref, 
                 sub_tree:Set[Ref], root_s: Ref) 
                returns (new_tree: Set[Ref], 
                         link: Ref) // ghost
    
    requires root in tree
    requires root_s in sub_tree
    requires DISJOINT(tree, sub_tree)
    requires g == tree union sub_tree
    requires TREE(g)
    requires TWO_ROOTED_DAG(g, root, root_s)
    requires CLOSED(tree) && CLOSED(sub_tree) // Can be learned from TWO_ROOTED_DAG + (anti-NoExit)

    ensures new_tree == g
    ensures TREE(g)
    ensures CONST_EDGES(sub_tree)

    ensures link in tree 
    ensures forall x:Ref, y:Ref :: 
        { E_(new_tree, x, y) }
        { E0(tree, x, y) }
        { E0(sub_tree, x, y) }
            E_(new_tree, x, y) <==> E0(tree, x, y) || E0(sub_tree, x, y) || 
                                    (x == link && y == root_s) 

    ensures old(root.right) == null ==> root == link && root.right == root_s

    ensures forall x:Ref, y:Ref :: 
        { P_(g, x, y) }
        { P0(g, x, y) }
        { P0(g, x, link), P0(g, root_s, y) }
            (x in sub_tree && y in tree     ==> !P_(g, x, y)) &&
            (x in sub_tree && y in sub_tree ==> (P_(g, x, y) <==> P0(g, x, y))) && 
            (x in tree     && y in tree     ==> (P_(g, x, y) <==> P0(g, x, y))) && 
            (x in tree     && y in sub_tree ==> (P_(g, x, y) <==> P0(g, x, link) && P0(g, root_s, y)))
    
    ensures GLOBAL_ROOT(new_tree, root)
{
    new_tree := tree union sub_tree

    // Partitioning paths in disjoint structures of (g): tree, sub_tree
    EnableFocusOnConvexSubHeap(g, tree)
    EnableFocusOnConvexSubHeap(g, sub_tree)

    if ( root.right != null ) {

        var ch_node: Ref := root.right
        var ch_tree: Set[Ref] := sub(tree, ch_node)
        var frame: Set[Ref] := tree setminus ch_tree

        // Footprint of the sub-call: 
        var g1: Set[Ref] := ch_tree union sub_tree

        // Partitioning paths before sub-call: (ch_tree union sub_tree), frame
        EnableFocusOnConvexSubHeap(g, g1)
        EnableFocusOnConvexSubHeap(g, frame)
        
        // Partitioning paths in disjoint structures of (g1): ch_tree, sub_tree
        EnableFocusOnConvexSubHeap(g1, ch_tree)
        EnableFocusOnConvexSubHeap(g1, sub_tree)

    label l1
        g1, link := mergeRight(g1, ch_tree, ch_node, sub_tree, root_s)
    label l2

        new_tree := frame union g1

        // Recompute the reachability in (g) after the sub-call. 
        ApplyConvexTCFraming(l1, l2, g1, g, frame)
        
        // Partition paths after the sub-call. 
        EnableFocusOnConvexSubHeap(g, g1)
        EnableFocusOnConvexSubHeap(g, frame)
    
    } else {
        // Encoding root.right := root_s ...
        link_DAG_right(new_tree, root, root_s)
        link := root
    }
}
