import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../../binary/_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"
import "../../_preambles/common/dag.vpr"
import "../../binary/_preambles/dag.vpr"

// TODO: verify convexity check
define __CONVEXITY_CHECKES false

method disconnectAll(h: Set[Ref])
    requires GRAPH(h)
    ensures GRAPH(h)
    ensures forall x:Ref, y:Ref :: 
        { P_(h, x, y) }
        { P0(h, x, y) }
            x in h && y in h ==> (P_(h, x, y) <==> x == y)
    ensures forall x:Ref, y:Ref :: 
        { E_(h, x, y) }
            x in h && !(y in h) ==> (E_(h, x, y) <==> E0(h, x, y))

define ACYCLIC_IN(g, h)
    (h subset g) && 
    (forall v1:Ref, v2:Ref :: 
        { E_(g, v1, v2) }
        { P_(g, v2, v1) } 
            v1 in h && v2 in h && E_(g, v1, v2) ==> !P_(g, v2, v1))

define HAMMOCK_IN(g, h, s, t) 
    (s in h && t in h) &&
    CLOSED(h) && 
    ACYCLIC_IN(g, h) && 
    (s != t) && 
    (forall n: Ref :: 
        { P_(g, s, n) }
        { P_(g, n, t) }
            n in h ==> P_(g, s, n) && P_(g, n, t))

method caller(g: Set[Ref], 
              h1: Set[Ref], s1: Ref, t1: Ref,  
              h2: Set[Ref], s2: Ref, t2: Ref)
    
    requires GRAPH(g)
    requires g == h1 union h2 
    requires DISJOINT(h1, h2)
    requires HAMMOCK_IN(g, h1, s1, t1)
    requires HAMMOCK_IN(g, h2, s2, t2)
    requires s1.left == null
    requires t2.right == null

    ensures GRAPH(g)
    ensures !P_(g, s2, t2)
    ensures P_(g, s1, t1)
{
    EnableFocus(g, h1)
    EnableFocus(g, h2)
    EnableFocusForConvexSubHeap(g, h2)

    link_DAG_left(g, s1, s2)
    link_DAG_right(g, t2, t1)

    label l1
    
    var frame:Set[Ref] := g setminus h2

    EnableFocusOnFrame(h2, g, frame)
    
    Enclose(frame, g)

    disconnectAll(h2)
    label l2

    // CHECK_CONVEXITY(h2, g)
    // assert DISJOINT(h2, h1)
    // // assert LCONVEX_(h2, h1)

    // var v1:Ref 
    // var v2:Ref 
    // var u:Ref 

    // assume v1 in h2 && v2 in h2 && u in h1 && P_(h1, u, v2) 
    // assert !P_(h2, v1, u)


    EnableFocusOnConvexSubHeap(g, h2)
    ApplyConvexTCFraming(l1, l2, h2, g, frame)
}