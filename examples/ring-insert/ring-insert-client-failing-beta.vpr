import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../../binary/_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../../binary/_preambles/dag.vpr"

import "../../_preambles/zopg-po.vpr"


function IS_ZOPG(h: Set[Ref]): Bool
    requires GRAPH(h)

define __CONVEXITY_CHECKES false

method testZopgObligations(g: Set[Ref], R: Set[Ref], u:Ref, r: Ref)
    requires GRAPH(g)
    requires IS_ZOPG(g)
    requires r in R
    requires R subset g
    requires !(u in R) && u in g
    requires forall x:Ref, y:Ref :: 
        { P_(g, x, y) }
        { P_(g, x, u), P_(g, r, y) }
            x in g && y in g && 
            P_(g, x, y) && P_(g, x, u) 
                ==> !P_(g, r, y)

    // The failure is due to the attached node, u, having outgoing paths. 
    //  The following invariant fixes the failure:  
    // requires CLOSED_N(u)

    requires RING_IN(R, g)
{
    var g1: Set[Ref] := R union Set(u)
    var frame: Set[Ref] := g setminus g1

    EnableFocusOnConvexSubHeap(g, g1)    
    EnableFocus(g, frame)

    assume SAVE_ZOPG_BEFORE_CONVEX_CALL(g1, g, frame)
label l1
    ringInsert(g1, R, u, r)
label l2

    EnableFocusOnConvexSubHeap(g, g1)

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert CHECK_ZOPG_AFTER_CONVEX_CALL(l1, l2, g1, g, frame)
}

define CLOSED_N(node) 
    (forall n:Ref :: 
        { P_(g, node, n) }
            P_(g, node, n) <==> node == n)

define FUNC(g) (
    forall x:Ref, y:Ref, z:Ref :: 
        { E_(g, z, x), E_(g, z, y) }
            x in g && y in g && z in g && 
            E_(g, z, x) && E_(g, z, y) ==> (x == y))

define UNSH(g) (
    forall x:Ref, y:Ref, z:Ref :: 
        { E_(g, x, z), E_(g, y, z) }
            x in g && y in g && z in g && 
            E_(g, x, z) && E_(g, y, z) ==> (x == y))

define SCC_IN(R, g) ( 
    forall x:Ref, y:Ref :: 
        { P_(g, y, x) } // not a typo!
            x in R && y in R ==> P_(g, x, y)) 

define RING_IN(R, g) ( 
    IS_ZOPG(R) && FUNC(R) && UNSH(R) && SCC_IN(R, g))


method ringInsert(g: Set[Ref], R: Set[Ref], u: Ref, r:Ref)
    requires GRAPH(g)
    requires g == R union Set(u)
    requires r in R
    requires !(u in R)
    requires RING_IN(R, g)
    requires !P_(g, u, r) && !P_(g, r, u)
    // requires CLOSED_N(u)

    ensures GRAPH(g)
    ensures RING_IN(g, g)
    
    ensures forall x:Ref, y:Ref :: 
        { P_(g, x, y) }
            x in g && x != u && y != u ==> 
                ( P_(g, x, y) <==> P0(g, x, y) )
    ensures forall n:Ref :: 
        { P_(g, u, n) }
            !(n in g) ==> ( P_(g, u, n) <==> P0(g, r, n) || P0(g, u, n) )
