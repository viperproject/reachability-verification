import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../../binary/_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../../binary/_preambles/dag.vpr"

define __CONVEXITY_CHECKES true 
define __ALLOW_SHARED_NODES true // arbitrary DAG

method merge(l: Ref, r: Ref,
             g: Set[Ref], ldag: Set[Ref], rdag: Set[Ref]) // ghost
    returns (link: Ref) // ghost
    
    requires l in ldag
    requires r in rdag

    requires DISJOINT(ldag, rdag)
    requires g == ldag union rdag
    requires __ALLOW_SHARED_NODES ? DAG(g) : TREE(g)
    
    /// Encoding forall n:Ref :: n in ldag <==> P_(g, l, n) ... 
    requires forall n:Ref :: 
        { P_(g, l, n) }
            P_(g, l, n) ==> n in ldag
    requires forall n:Ref :: 
        { n in ldag, P_(g, l, n) }
            n in ldag ==> P_(g, l, n)
    
    /// Encoding forall n:Ref :: n in rdag <==> P_(g, r, n) ... 
    requires forall n:Ref :: 
        { P_(g, r, n) }
            P_(g, r, n) ==> n in rdag
    requires forall n:Ref :: 
        { n in rdag, P_(g, r, n) }
            n in rdag ==> P_(g, r, n)
    // requires CLOSED_IN(ldag, g) // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< THE BUG

    ensures __ALLOW_SHARED_NODES ? DAG(g) : TREE(g)

    ensures link in ldag 
    ensures forall x:Ref, y:Ref :: 
        { E_(g, x, y) }
            E_(g, x, y) ==> E0(g, x, y) || (x == link && y == r) 
    ensures forall x:Ref, y:Ref :: 
        { E0(g, x, y) }
        { E_(g, x, y) }
            E0(g, x, y) || (x == link && y == r) ==> E_(g, x, y)

    ensures old(l.right) == null ==> l == link && l.right == r

    ensures forall x:Ref, y:Ref :: 
        { P_(g, x, y) }
        { P0(g, x, y) }
        { P0(g, x, link), P0(g, r, y) }
            P_(g, x, y) <==> P0(g, x, y) || P0(g, x, link) && P0(g, r, y)
{
    if ( l.right != null ) { 
        //:: ExpectedOutput(application.precondition:assertion.false)
        var nldag: Set[Ref] := subIn(g, ldag, l.right)

        // Footprint of the sub-call: 
        var g1: Set[Ref] := nldag union rdag
        
        // The following is applied to FOOTRPINT vs. GLOB
        //:: ExpectedOutput(assert.failed:assertion.false)
        DeduceRelationshipBetweenSubHeaps(g1, g)
        
        var frame: Set[Ref] := g setminus g1 // ldag setminus nldag        

        // Partitioning paths before sub-call: (nldag union rdag), frame
        EnableFocusOnConvexSubHeap(g, g1)

    label l1
        //:: ExpectedOutput(call.precondition:assertion.false)
        link := merge(l.right, r, g1, nldag, rdag)
    label l2

        // Recompute the reachability in (g) after the sub-call. 
        EnableFocusOnConvexSubHeap(g, g1)
        EnableFocus(g, frame)
        ApplyConvexTCFraming(l1, l2, g1, g, frame)
    
    } else {
        // Encoding l.right := r ...
        link_DAG_right(g, l, r)
        link := l
    }
}
