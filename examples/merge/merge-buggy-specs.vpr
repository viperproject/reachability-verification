import "../../_preambles/TrCloDomain.vpr"
import "../../_preambles/skolems.vpr"

import "../../_preambles/legoFraming.vpr"

import "../../_preambles/macros.vpr"
import "../../_preambles/memspecs.vpr"
import "../../binary/_preambles/memspecs.vpr"

import "../../_preambles/common/graph.vpr"

import "../../_preambles/common/dag.vpr"
import "../../binary/_preambles/dag.vpr"

define __CONVEXITY_CHECKES true 
define __ALLOW_SHARED_NODES true // arbitrary DAG



method mergeRight(g: Set[Ref], // ghost
                ldag: Set[Ref], lr: Ref, 
                rdag:Set[Ref],  rr: Ref) 
    returns (link: Ref) // ghost
    
    requires lr in ldag
    requires rr in rdag
    requires DISJOINT(ldag, rdag)
    requires g == ldag union rdag
    requires __ALLOW_SHARED_NODES ? DAG(g) : TREE(g)
    
    /// Encoding forall n:Ref :: n in ldag <==> P_(g, lr, n) ... 
    requires forall n:Ref :: 
        { P_(g, lr, n) }
            P_(g, lr, n) ==> n in ldag
    requires forall n:Ref :: 
        { n in ldag, P_(g, lr, n) }
            n in ldag ==> P_(g, lr, n)
    
    /// Encoding forall n:Ref :: n in rdag <==> P_(g, rr, n) ... 
    requires forall n:Ref :: 
        { P_(g, rr, n) }
            P_(g, rr, n) ==> n in rdag
    requires forall n:Ref :: 
        { n in rdag, P_(g, rr, n) }
            n in rdag ==> P_(g, rr, n)
    // requires CLOSED_IN(ldag, g)  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< THE BUG

    ensures __ALLOW_SHARED_NODES ? DAG(g) : TREE(g)

    ensures link in ldag 
    ensures forall x:Ref, y:Ref :: 
        { E_(g, x, y) }
            E_(g, x, y) ==> E0(g, x, y) || (x == link && y == rr) 
    ensures forall x:Ref, y:Ref :: 
        { E0(g, x, y) }
        { E_(g, x, y) }
            E0(g, x, y) || (x == link && y == rr) ==> E_(g, x, y)

    ensures old(lr.right) == null ==> lr == link && lr.right == rr

    ensures forall x:Ref, y:Ref :: 
        { P_(g, x, y) }
        { P0(g, x, y) }
        { P0(g, x, link), P0(g, rr, y) }
            x in g && y in g ==> // optional
                ( P_(g, x, y) <==> P0(g, x, y) || P0(g, x, link) && P0(g, rr, y) )
{
    // Partitioning paths in disjoint structures of (g): ldag, rdag
    EnableFocusOnConvexSubHeap(g, ldag)
    EnableFocusOnConvexSubHeap(g, rdag)

    if ( lr.right != null ) {
        var ch_node: Ref := lr.right
        assert P_(g, lr, ch_node) // traversing the heap
        
        var ch_dag: Set[Ref] := sub(ldag, ch_node)

        // Footprint of the sub-call: 
        var g1: Set[Ref] := ch_dag union rdag
        
        // The following is applied to FOOTRPINT vs. GLOB
        DeduceRelationshipBetweenSubHeaps(g1, g)
        
        var frame: Set[Ref] := g setminus g1 // ldag setminus ch_dag        

        // Partitioning paths before sub-call: (ch_dag union rdag), frame
        EnableFocusOnConvexSubHeap(g, g1)
        EnableFocusOnFrame(g1, g, frame)
        
        // Partitioning paths in disjoint structures of (g1): ch_dag, rdag
        // EnableFocusOnConvexSubHeap(g1, ch_dag)
        EnableFocus(g1, rdag)
        

    label l1
        link := mergeRight(g1, ch_dag, ch_node, rdag, rr)
    label l2

        // Recompute the reachability in (g) after the sub-call. 
        EnableFocusOnConvexSubHeap(g, g1)
        EnableFocus(g, frame)
        
        ApplyConvexTCFraming(l1, l2, g1, g, frame)
    
    } else {
        // Encoding lr.right := rr ...
        link_DAG_right(g, lr, rr)
        link := lr
    }
}
